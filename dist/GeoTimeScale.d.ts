import { Selection, BaseType } from 'd3';
import { GeoTimeScaleOptions, HierarchyNode, IntervalItem, NodeItem } from './typing';
export default class GeoTimeLine {
    /** text font */
    readonly font: string;
    /** svg object */
    readonly svg: Selection<SVGSVGElement, unknown, HTMLElement, any>;
    readonly height: number;
    readonly width: number;
    private _handleX;
    /** interval data */
    readonly intervals: IntervalItem[];
    /** hierarchical data generated by intervals */
    readonly hierarchicalData: HierarchyNode<IntervalItem>;
    /** the root hierarchical data */
    readonly root: NodeItem;
    /** user input options */
    readonly options: GeoTimeScaleOptions;
    private _onChange;
    private _onDrag;
    private _ready;
    private _cellGroup;
    private _cell;
    private _rect;
    private _text;
    private _handle;
    /** get or set animation transition time */
    transition: number;
    private _simplify;
    private _focus;
    private _sequence;
    private _neighborWidth;
    private _tickLength;
    private _ticksGroup;
    /**
     * Create a GeoTimeScale
     * @param {string | BaseType} selector CSS selector string
     * @param {IntervalItem[]} intervals geo time intervals array
     * @param {number} [options.width] svg width, defaults to container's width
     * @param {number} [options.height = 400] svg height, defaults to 400px
     * @param {number} [options.fontSize = 12] font size, defaults to 12px
     * @param {string} [options.fontFamily = 'sans-serif'] font family, defaults to 'sans-serif'
     * @param {Function} [options.onChange] callback when focused node change
     * @param {Function} [options.onDrag] callback when handle drag end
     * @param {Object} [options.margin] svg margin, defaults to { top: 0, right: 0, bottom: 0, left: 0 }
     * @param {Object} [options.padding] svg padding, defaults to { top: 0, right: 0, bottom: 0, left: 0 }
     * @param {number} [options.transition = 450] animation time, defaults to 450ms
     * @param {Function} [options.intervalSum] interval transform setting, defaults to d => d.leaf ? d.start - d.end : 0
     * @param {boolean} [options.simplify = true] simplify show 2 levels or not
     * @param {number} [options.neighborWidth = 100] focused node's neighbor node width, defaults to 100px
     * @param {number} [options.tickLength = 15] tick length, defaults to 15px
     * @param {string} [options.unit = ''] tick value unit
     */
    constructor(selector: string | BaseType, intervals: IntervalItem[], options?: GeoTimeScaleOptions);
    /** get or set focused stage
     * @example
     * geoTimeScale.stage = 'Cambrian'
     */
    get stage(): string;
    set stage(val: string);
    set time(val: number);
    get sequence(): NodeItem[];
    get ready(): boolean;
    private _init;
    private _dispatchFunc;
    private _addTitle;
    /**
     * draw rect
     */
    private _drawRect;
    private _drawHandle;
    /** draw text */
    private _drawText;
    private _makeTicksData;
    private _updateTicks;
    private _addTicks;
    /**
     * click rect and zoom
     */
    private _clicked;
    private _changeHandlePos;
    private getTimeByX;
    private getXByTime;
}
